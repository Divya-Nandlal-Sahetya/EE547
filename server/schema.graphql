type Query {
  teacher(id: ID!): Person

  teachers(limit: Int, offset: Int, sort: String): [Person]!

  student(emailid: String!): Person

  students(limit: Int, offset: Int, sort: String): [Person]!

  grades(id: ID!): gradebook
}

type Mutation {
  personCreate(personInput: personCreateInput): Person
  personDelete(id: ID!): Boolean
  personUpdate(id: ID!, personInput: personUpdateInput): Person

  subjectCreate(subjectInput: subjectCreateInput): Subject
  subjectDelete(id: ID!): Boolean
  subjectUpdate(id: ID!, subjectInput: subjectUpdateInput): Subject

  gradebookCreate(gradebookInput: gradebookCreateInput): gradebook
  gradebookDelete(id: ID!): Boolean
  gradebookUpdate(id: ID!, gradebookInput: gradebookUpdateInput): gradebook
}

enum roleEnum {
  teacher
  student
  admin
}

input personCreateInput {
  fname: String!
  lname: String
  role: roleEnum
  gpa: Float
  emailid: String
}

input personUpdateInput {
  fname: String
  lname: String
  is_active: Boolean
  gpa: Float
}

type Person {
  is_active: Boolean
  fname: String
  lname: String
  name: String
  id: ID
  role: roleEnum
  gpa: Float
  emailid: String
}

input subjectCreateInput {
  name: String
  code: String 
  is_active: Boolean
}

input subjectUpdateInput {
  name: String
  is_active: Boolean
}

input gradebookCreateInput {
  subject_code: String
  grade: String
  gpa: Float
  student_id: ID
}

input gradebookUpdateInput {
  subject_code: String
  grade: String
  gpa: Float
}

type Subject {
  is_active: Boolean
  name: String
  code: String
  id: ID
}

type gradebook {
  id: ID!
  subject_code: String
  grade: String
  gpa: Float
  student_id: ID
}
